# お気に入り機能実装ガイド

## 1. 必要なパッケージ（requirements.txt）
```
Flask==2.0.1
Flask-SQLAlchemy==2.5.1
Flask-Login==0.5.0
Flask-Migrate==3.1.0
```

## 2. 基本設定ファイル（config.py）
```python
class Config:
    SECRET_KEY = 'your-secret-key'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///your.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
```

## 3. アプリケーション初期化（__init__.py）
```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from config import Config

db = SQLAlchemy()
login = LoginManager()

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    db.init_app(app)
    login.init_app(app)
    
    # Blueprint登録
    from app.main import bp as main_bp
    app.register_blueprint(main_bp)
    
    from app.api import bp as api_bp
    app.register_blueprint(api_bp)
    
    return app
```

## 4. データベースモデル（models/user.py）
```python
from datetime import datetime
from flask_login import UserMixin

successor_favorites = db.Table('successor_favorites',
    db.Column('user_id', db.Integer, db.ForeignKey('users.id', ondelete='CASCADE')),
    db.Column('successor_id', db.Integer, db.ForeignKey('successors.id', ondelete='CASCADE')),
    db.Column('created_at', db.DateTime, default=datetime.utcnow)
)

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    user_type = db.Column(db.String(20))  # 'company' or 'successor'
    
    # リレーションシップ
    favorite_successors = db.relationship('Successor',
        secondary=successor_favorites,
        lazy='dynamic',
        backref=db.backref('favorited_by', lazy='dynamic'))
```

## 5. APIエンドポイント（api/routes.py）
```python
from flask import Blueprint, jsonify
from flask_login import current_user, login_required
from app import db
from app.models import Successor

api = Blueprint('api', __name__)

@api.route('/api/favorites/successors/<int:id>', methods=['POST'])
@login_required
def toggle_successor_favorite(id):
    if current_user.user_type != 'company':
        return jsonify({'status': 'error', 'message': '企業アカウントのみ実行できます'}), 403
    
    successor = Successor.query.get_or_404(id)
    try:
        if successor in current_user.favorite_successors:
            current_user.favorite_successors.remove(successor)
            action = 'removed'
        else:
            current_user.favorite_successors.append(successor)
            action = 'added'
        db.session.commit()
        return jsonify({'status': 'success', 'action': action})
    except Exception as e:
        db.session.rollback()
        return jsonify({'status': 'error', 'message': str(e)}), 400
```

## 6. ビューのルート（main/routes.py）
```python
@bp.route('/company/favorites')
@login_required
def company_favorites():
    if current_user.user_type != 'company':
        flash('企業アカウントのみアクセスできます。', 'error')
        return redirect(url_for('main.successor_favorites'))
    favorite_successors = current_user.favorite_successors.all()
    return render_template('main/company_favorites.html', 
                         title='お気に入り企業', 
                         successors=favorite_successors)
```

## 7. テンプレート継承の実装

### 7.1 基本構造
```html
{% extends "base.html" %}

{% block title %}ページタイトル{% endblock %}

{% block extra_css %}
<style>
    /* ページ固有のスタイル */
</style>
{% endblock %}

{% block content %}
    <!-- ページのメインコンテンツ -->
{% endblock %}

{% block extra_js %}
<script>
    // ページ固有のJavaScript
</script>
{% endblock %}
```

### 7.2 企業一覧ページの実装例
```html
{% extends "base.html" %}

{% block title %}企業一覧{% endblock %}

{% block extra_css %}
<style>
    :root {
        --star-inactive: #dee2e6;
        --star-active: #ffc107;
    }
    
    .company-card {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    /* ... 他のスタイル ... */
</style>
{% endblock %}

{% block content %}
<div class="container">
    <!-- 検索フォーム -->
    <!-- 企業カードのリスト -->
    <!-- ページネーション -->
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const favoriteButtons = document.querySelectorAll('.favorite-btn');
    
    favoriteButtons.forEach(function(button) {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            const companyId = this.dataset.companyId;
            
            try {
                const response = await fetch(`/api/favorites/companies/${companyId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    credentials: 'same-origin'
                });
                // ... レスポンス処理 ...
            } catch (error) {
                console.error('Error:', error);
                alert('エラーが発生しました: ' + error.message);
            }
        });
    });
});
</script>
{% endblock %}

### 7.3 CSRFトークンの設定
1. base.htmlでのメタタグ設定
```html
<meta name="csrf-token" content="{{ csrf_token() }}">
```

2. APIリクエスト時のヘッダー設定
```javascript
headers: {
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
}
```

# 企業一覧のお気に入り機能実装

## 1. データベースモデル（models/tables.py）
```python
from datetime import datetime
from app import db

# 企業お気に入りの中間テーブル定義
company_favorites = db.Table('company_favorites',
    db.Column('user_id', db.Integer, db.ForeignKey('users.id'), primary_key=True),
    db.Column('company_id', db.Integer, db.ForeignKey('companies.id'), primary_key=True),
    db.Column('created_at', db.DateTime, default=datetime.utcnow)
)
```

## 2. APIエンドポイント（api/routes.py）
```python
@api.route('/api/favorites/companies/<int:id>', methods=['POST'])
@login_required
def toggle_company_favorite(id):
    if current_user.user_type != 'successor':
        return jsonify({'status': 'error', 'message': '後継者アカウントのみ実行できます'}), 403
    
    company = Company.query.get_or_404(id)
    try:
        if company in current_user.favorite_companies:
            current_user.favorite_companies.remove(company)
            action = 'removed'
        else:
            current_user.favorite_companies.append(company)
            action = 'added'
        db.session.commit()
        return jsonify({'status': 'success', 'action': action})
    except Exception as e:
        db.session.rollback()
        return jsonify({'status': 'error', 'message': str(e)}), 400
```

## 3. 企業一覧ページのお気に入りボタン（templates/main/company_list.html）
```html
<style>
    :root {
        --star-inactive: #dee2e6;
        --star-active: #ffc107;
    }
    
    .favorite-btn {
        cursor: pointer;
        border: none;
        background: transparent;
        padding: 0;
        margin-right: 0.5rem;
        transition: transform 0.2s ease;
    }
    
    .favorite-btn:hover {
        transform: scale(1.1);
    }
    
    .favorite-btn i {
        font-size: 1.2rem;
        transition: color 0.3s ease;
        color: var(--star-inactive);
    }
    
    .favorite-btn i.favorite-active {
        color: var(--star-active);
    }
</style>

<!-- お気に入りボタン -->
<button class="favorite-btn" data-company-id="{{ company.id }}">
    <i class="fas fa-star {% if company in current_user.favorite_companies %}favorite-active{% endif %}"></i>
</button>

<!-- JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const favoriteButtons = document.querySelectorAll('.favorite-btn');
    
    favoriteButtons.forEach(function(button) {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            const companyId = this.dataset.companyId;
            const icon = this.querySelector('i');
            
            try {
                const response = await fetch(`/api/favorites/companies/${companyId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                if (data.status === 'success') {
                    if (data.action === 'added') {
                        icon.classList.add('favorite-active');
                    } else {
                        icon.classList.remove('favorite-active');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                alert('エラーが発生しました: ' + error.message);
            }
        });
    });
});
</script>
```

## 4. 注意点
1. データベース関連
- `company_favorites`テーブルが正しく作成されていることを確認
- マイグレーションの実行が必要

2. APIエンドポイント
- `/api/favorites/companies/<int:id>`のパスを使用
- 後継者アカウントのみアクセス可能
- レスポンスフォーマットの統一

3. UI/UX
- ★マークの色: 非アクティブ(#dee2e6)、アクティブ(#ffc107)
- ホバー時の拡大アニメーション
- クリック時のスムーズな色変更

4. エラーハンドリング
- 非認証ユーザーのアクセス制限
- アカウントタイプの確認
- データベースエラーの処理

5. 既存機能との整合性
- 後継者一覧のお気に入り機能と同じ動作
- 共通のスタイリング
- 統一されたユーザー体験

## 8. データベース初期化コマンド
```bash
flask db init
flask db migrate -m "add favorite tables"
flask db upgrade
```

## 9. 注意点
1. データベース関連
- マイグレーション実行前にモデルが正しく定義されていることを確認
- 外部キー制約とカスケード削除の設定を確認

2. セキュリティ
- SECRET_KEYの適切な設定
- ユーザー認証の確認
- CSRFトークンの設定

3. UI/UX
- アニメーション効果の動作確認
- エラー時のユーザーフィードバック
- レスポンシブデザインの確認

4. JavaScript
- 非同期処理のエラーハンドリング
- ブラウザコンソールでのエラー確認
- イベントリスナーの適切な設定

## 10. トラブルシューティング
1. お気に入りボタンが機能しない場合
- APIエンドポイントのパスが正しいか確認
- ブラウザのコンソールでエラーを確認
- ユーザー認証状態を確認

2. データベースエラー
- マイグレーションが正しく適用されているか確認
- テーブル構造を確認
- 外部キー制約を確認

3. 表示の問題
- CSSが正しく適用されているか確認
- JavaScriptエラーの有無を確認
- レスポンシブデザインの動作確認

## 1. データベースの設定
- お気に入りの関連付けテーブルの作成
- Company, Successorモデルとの関連付け

## 2. APIエンドポイントの実装
- `/api/favorites/companies/<id>` - 企業のお気に入り登録/解除
- `/api/favorites/successors/<id>` - 後継者のお気に入り登録/解除

## 3. フロントエンドの実装
- お気に入りボタンのHTML実装
- JavaScriptでのクリックイベント処理
- アイコンの状態管理（active/inactive）

## 4. 注意点と既知の問題
### 4.1 ルーティングの注意点
- APIエンドポイントのプレフィックスは`/api`で登録されているため、ルート定義で重複して`/api`を付けないこと
  - 正しい例: `@api.route('/favorites/companies/<int:id>')`
  - 誤った例: `@api.route('/api/favorites/companies/<int:id>')`
  - この重複があると、お気に入りボタンが反応しなくなる

### 4.2 CSRFトークンの設定
- フォームにCSRFトークンを含める
- APIリクエストヘッダーにCSRFトークンを設定

### 4.3 デバッグのポイント
- ブラウザのコンソールでエラーを確認
- ネットワークタブでAPIリクエストの状態を確認
- バックエンドのログで詳細なエラー情報を確認

## 5. トラブルシューティング
### 5.1 お気に入りボタンが反応しない場合
1. ルートのプレフィックスが正しいか確認
2. JavaScriptコンソールでエラーを確認
3. ネットワークタブでAPIリクエストの送信先を確認
4. CSRFトークンが正しく設定されているか確認

### 5.2 お気に入りの状態が更新されない場合
1. データベースのトランザクションが正しく実行されているか確認
2. フロントエンドでレスポンスを正しく処理しているか確認
3. アイコンのクラス名が正しく更新されているか確認 

## 6. トラブルシューティング事例

### 6.1 後継者一覧ページでの★マーク機能の問題

#### 問題の症状
- 後継者一覧ページで★マークをクリックしても反応がない
- コンソールにログが表示されない
- お気に入り追加・削除が機能しない

#### 原因
1. テンプレートブロックの誤り
   - `{% block scripts %}` を使用（誤）
   - `{% block extra_js %}` が正しい実装

2. APIエンドポイントのパスの混在
   - `/api/favorites/successors/${successorId}`
   - `/favorites/successors/${successorId}`
   - 一貫性のないパスによりリクエストエラー

3. デバッグ情報の不足
   - コンソールログが不十分で問題特定が困難

#### 解決策
1. テンプレートブロックの修正
```html
{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // JavaScriptコード
});
</script>
{% endblock %}
```

2. デバッグログの追加
```javascript
console.log('DOM loaded, initializing favorite buttons...');
console.log('Found favorite buttons:', favoriteButtons.length);
console.log('Setting up button:', button);
console.log('Button clicked');
console.log('Successor ID:', successorId);
```

3. エラーハンドリングの改善
```javascript
if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
}
// エラーメッセージの表示
alert('エラーが発生しました: ' + error.message);
```

4. CSRFトークンの正しい設定
```html
<input type="hidden" id="csrf-token" value="{{ csrf_token() }}">
```
```javascript
headers: {
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
}
```

#### 教訓
1. テンプレート継承の確認
   - 親テンプレート（base.html）で定義されているブロック名を確認
   - 正しいブロック名を使用することが重要

2. デバッグの重要性
   - 適切なコンソールログの設定
   - エラーメッセージの表示による問題特定

3. APIエンドポイントの一貫性
   - バックエンドとフロントエンドで一貫したパスを使用
   - APIドキュメントの参照と遵守

4. 既存実装の活用
   - 動作している機能（企業一覧ページなど）を参考に実装
   - 共通のパターンやベストプラクティスの採用

#### 確認項目
1. コンソールログの確認
   - "DOM loaded, initializing favorite buttons..."の表示
   - ボタンクリック時のログ出力

2. ネットワークタブの確認
   - APIリクエストの送信先
   - レスポンスステータス
   - CSRFトークンの送信

3. 動作確認
   - ★マークのクリックイベント
   - お気に入りの追加・削除
   - 視覚的なフィードバック

## 8. データベース初期化コマンド
```bash
flask db init
flask db migrate -m "add favorite tables"
flask db upgrade
```

## 9. 注意点
1. データベース関連
- マイグレーション実行前にモデルが正しく定義されていることを確認
- 外部キー制約とカスケード削除の設定を確認

2. セキュリティ
- SECRET_KEYの適切な設定
- ユーザー認証の確認
- CSRFトークンの設定

3. UI/UX
- アニメーション効果の動作確認
- エラー時のユーザーフィードバック
- レスポンシブデザインの確認

4. JavaScript
- 非同期処理のエラーハンドリング
- ブラウザコンソールでのエラー確認
- イベントリスナーの適切な設定

## 10. トラブルシューティング
1. お気に入りボタンが機能しない場合
- APIエンドポイントのパスが正しいか確認
- ブラウザのコンソールでエラーを確認
- ユーザー認証状態を確認

2. データベースエラー
- マイグレーションが正しく適用されているか確認
- テーブル構造を確認
- 外部キー制約を確認

3. 表示の問題
- CSSが正しく適用されているか確認
- JavaScriptエラーの有無を確認
- レスポンシブデザインの動作確認

## 1. データベースの設定
- お気に入りの関連付けテーブルの作成
- Company, Successorモデルとの関連付け

## 2. APIエンドポイントの実装
- `/api/favorites/companies/<id>` - 企業のお気に入り登録/解除
- `/api/favorites/successors/<id>` - 後継者のお気に入り登録/解除

## 3. フロントエンドの実装
- お気に入りボタンのHTML実装
- JavaScriptでのクリックイベント処理
- アイコンの状態管理（active/inactive）

## 4. 注意点と既知の問題
### 4.1 ルーティングの注意点
- APIエンドポイントのプレフィックスは`/api`で登録されているため、ルート定義で重複して`/api`を付けないこと
  - 正しい例: `@api.route('/favorites/companies/<int:id>')`
  - 誤った例: `@api.route('/api/favorites/companies/<int:id>')`