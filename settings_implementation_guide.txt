設定機能実装ガイド

1. 概要

本ドキュメントは、Intoppy Time OKの設定機能（メールアドレス変更、パスワード変更、アカウント無効化）の実装に関する詳細な情報を提供します。

2. 実装済み機能

2.1 メールアドレス変更機能
- ルート: /settings/change-email
- テンプレート: app/templates/main/change_email.html
- フォーム: ChangeEmailForm (app/forms/settings.py)
- 要件:
  - 現在のパスワードによる認証が必要
  - 新しいメールアドレスの重複チェック
  - メールアドレスの形式チェック

2.2 パスワード変更機能
- ルート: /settings/change-password
- テンプレート: app/templates/main/change_password.html
- フォーム: ChangePasswordForm (app/forms/settings.py)
- 要件:
  - 現在のパスワードによる認証が必要
  - 新しいパスワードは8文字以上
  - 英数字の混合が必要
  - 新しいパスワードの再入力による確認

2.3 アカウント無効化機能
- ルート: /settings/deactivate
- テンプレート: app/templates/main/deactivate.html
- フォーム: DeactivateAccountForm (app/forms/settings.py)
- 要件:
  - 現在のパスワードによる認証が必要
  - 確認チェックボックスによる二重確認
  - 論理削除（is_active = False）による実装

3. データベース変更

3.1 新規テーブル
CREATE TABLE email_verification (
    id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    new_email VARCHAR(120) NOT NULL,
    token VARCHAR(100) NOT NULL,
    created_at DATETIME NOT NULL,
    is_used BOOLEAN NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY(user_id) REFERENCES users (id)
);

3.2 テーブル変更
- usersテーブルにdeactivated_atカラムを追加
  - 型: DATETIME
  - NULL許容: YES
  - 用途: アカウント無効化日時の記録

4. テスト手順

4.1 メールアドレス変更のテスト
1. 既存ユーザーでログイン
2. 設定ページに移動
3. 「メールアドレスの変更」をクリック
4. 以下のケースをテスト:
   - 正しい現在のパスワード + 新しいメールアドレス
   - 誤った現在のパスワード + 新しいメールアドレス
   - 既存のメールアドレスを使用
   - 不正なメールアドレス形式

4.2 パスワード変更のテスト
1. 既存ユーザーでログイン
2. 設定ページに移動
3. 「パスワードの変更」をクリック
4. 以下のケースをテスト:
   - 正しい現在のパスワード + 新しいパスワード（要件を満たす）
   - 誤った現在のパスワード + 新しいパスワード
   - 新しいパスワードが要件を満たさない場合
   - 新しいパスワードの再入力が一致しない場合

4.3 アカウント無効化のテスト
1. 既存ユーザーでログイン
2. 設定ページに移動
3. 「退会手続き」をクリック
4. 以下のケースをテスト:
   - 正しい現在のパスワード + 確認チェック
   - 誤った現在のパスワード + 確認チェック
   - 正しい現在のパスワード + 確認チェックなし
   - 無効化後のログイン試行

5. 注意点

5.1 セキュリティ
- すべての機能で現在のパスワードによる認証が必要
- パスワードはハッシュ化して保存
- CSRFトークンによる保護
- セッション管理の適切な実装

5.2 データ整合性
- アカウント無効化は論理削除で実装
- メールアドレス変更は一時テーブルを使用
- トランザクション管理の適切な実装

5.3 エラーハンドリング
- フォームバリデーションエラー
- データベースエラー
- 認証エラー
- セッションエラー

6. 今後の改善点

6.1 機能追加
- メールアドレス変更時の確認メール送信
- パスワード変更の履歴管理
- アカウント無効化の取り消し機能

6.2 セキュリティ強化
- 2要素認証の導入
- パスワード強度チェックの強化
- ログイン試行回数の制限

6.3 ユーザビリティ改善
- より詳細なエラーメッセージ
- プログレスバーの追加
- モバイル対応の強化

7. トラブルシューティング

7.1 よくある問題
1. メールアドレス変更が反映されない
   - データベースのトランザクションを確認
   - キャッシュのクリアを試行

2. パスワード変更後ログインできない
   - パスワードハッシュの生成を確認
   - セッションの状態を確認

3. アカウント無効化が完了しない
   - データベースのロックを確認
   - トランザクションの状態を確認

7.2 ログ確認
- アプリケーションログ: flask_app.log
- デバッグログ: flask_debug.log
- データベースログ: SQLiteのログを確認

8. 連絡先

技術的な問題や質問がある場合は、以下の連絡先までご連絡ください：
- メール: [連絡先メールアドレス]
- 担当者: [担当者名] 